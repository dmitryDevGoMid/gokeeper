// Code generated by MockGen. DO NOT EDIT.
// Source: asimencrypt.go

// Package mock_asimencrypt is a generated GoMock package.
package mock_asimencrypt

import (
	rsa "crypto/rsa"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAsimEncrypt is a mock of AsimEncrypt interface.
type MockAsimEncrypt struct {
	ctrl     *gomock.Controller
	recorder *MockAsimEncryptMockRecorder
}

// MockAsimEncryptMockRecorder is the mock recorder for MockAsimEncrypt.
type MockAsimEncryptMockRecorder struct {
	mock *MockAsimEncrypt
}

// NewMockAsimEncrypt creates a new mock instance.
func NewMockAsimEncrypt(ctrl *gomock.Controller) *MockAsimEncrypt {
	mock := &MockAsimEncrypt{ctrl: ctrl}
	mock.recorder = &MockAsimEncryptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsimEncrypt) EXPECT() *MockAsimEncryptMockRecorder {
	return m.recorder
}

// AllSet mocks base method.
func (m *MockAsimEncrypt) AllSet() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AllSet")
}

// AllSet indicates an expected call of AllSet.
func (mr *MockAsimEncryptMockRecorder) AllSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllSet", reflect.TypeOf((*MockAsimEncrypt)(nil).AllSet))
}

// CheckFile mocks base method.
func (m *MockAsimEncrypt) CheckFile(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFile", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckFile indicates an expected call of CheckFile.
func (mr *MockAsimEncryptMockRecorder) CheckFile(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFile", reflect.TypeOf((*MockAsimEncrypt)(nil).CheckFile), name)
}

// Decrypt mocks base method.
func (m *MockAsimEncrypt) Decrypt(ciphertext []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", ciphertext)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockAsimEncryptMockRecorder) Decrypt(ciphertext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockAsimEncrypt)(nil).Decrypt), ciphertext)
}

// DecryptOAEP mocks base method.
func (m *MockAsimEncrypt) DecryptOAEP(msg []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptOAEP", msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptOAEP indicates an expected call of DecryptOAEP.
func (mr *MockAsimEncryptMockRecorder) DecryptOAEP(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptOAEP", reflect.TypeOf((*MockAsimEncrypt)(nil).DecryptOAEP), msg)
}

// DecryptOAEPClient mocks base method.
func (m *MockAsimEncrypt) DecryptOAEPClient(msg []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptOAEPClient", msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptOAEPClient indicates an expected call of DecryptOAEPClient.
func (mr *MockAsimEncryptMockRecorder) DecryptOAEPClient(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptOAEPClient", reflect.TypeOf((*MockAsimEncrypt)(nil).DecryptOAEPClient), msg)
}

// Encrypt mocks base method.
func (m *MockAsimEncrypt) Encrypt(msg string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockAsimEncryptMockRecorder) Encrypt(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockAsimEncrypt)(nil).Encrypt), msg)
}

// EncryptByClientKey mocks base method.
func (m *MockAsimEncrypt) EncryptByClientKey(msg, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptByClientKey", msg, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptByClientKey indicates an expected call of EncryptByClientKey.
func (mr *MockAsimEncryptMockRecorder) EncryptByClientKey(msg, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptByClientKey", reflect.TypeOf((*MockAsimEncrypt)(nil).EncryptByClientKey), msg, key)
}

// EncryptByClientKeyParts mocks base method.
func (m *MockAsimEncrypt) EncryptByClientKeyParts(msg, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptByClientKeyParts", msg, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptByClientKeyParts indicates an expected call of EncryptByClientKeyParts.
func (mr *MockAsimEncryptMockRecorder) EncryptByClientKeyParts(msg, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptByClientKeyParts", reflect.TypeOf((*MockAsimEncrypt)(nil).EncryptByClientKeyParts), msg, key)
}

// GenerateKeyFile mocks base method.
func (m *MockAsimEncrypt) GenerateKeyFile(prefix string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateKeyFile", prefix)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateKeyFile indicates an expected call of GenerateKeyFile.
func (mr *MockAsimEncryptMockRecorder) GenerateKeyFile(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKeyFile", reflect.TypeOf((*MockAsimEncrypt)(nil).GenerateKeyFile), prefix)
}

// GenerateKeyLink mocks base method.
func (m *MockAsimEncrypt) GenerateKeyLink() (*rsa.PrivateKey, *rsa.PublicKey) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateKeyLink")
	ret0, _ := ret[0].(*rsa.PrivateKey)
	ret1, _ := ret[1].(*rsa.PublicKey)
	return ret0, ret1
}

// GenerateKeyLink indicates an expected call of GenerateKeyLink.
func (mr *MockAsimEncryptMockRecorder) GenerateKeyLink() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKeyLink", reflect.TypeOf((*MockAsimEncrypt)(nil).GenerateKeyLink))
}

// GenerateRsaKeyPair mocks base method.
func (m *MockAsimEncrypt) GenerateRsaKeyPair() (*rsa.PrivateKey, *rsa.PublicKey) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRsaKeyPair")
	ret0, _ := ret[0].(*rsa.PrivateKey)
	ret1, _ := ret[1].(*rsa.PublicKey)
	return ret0, ret1
}

// GenerateRsaKeyPair indicates an expected call of GenerateRsaKeyPair.
func (mr *MockAsimEncryptMockRecorder) GenerateRsaKeyPair() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRsaKeyPair", reflect.TypeOf((*MockAsimEncrypt)(nil).GenerateRsaKeyPair))
}

// GetBytePrivate mocks base method.
func (m *MockAsimEncrypt) GetBytePrivate() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytePrivate")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetBytePrivate indicates an expected call of GetBytePrivate.
func (mr *MockAsimEncryptMockRecorder) GetBytePrivate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytePrivate", reflect.TypeOf((*MockAsimEncrypt)(nil).GetBytePrivate))
}

// GetBytePublic mocks base method.
func (m *MockAsimEncrypt) GetBytePublic() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytePublic")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetBytePublic indicates an expected call of GetBytePublic.
func (mr *MockAsimEncryptMockRecorder) GetBytePublic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytePublic", reflect.TypeOf((*MockAsimEncrypt)(nil).GetBytePublic))
}

// ReadClientPublicKey mocks base method.
func (m *MockAsimEncrypt) ReadClientPublicKey() (*rsa.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadClientPublicKey")
	ret0, _ := ret[0].(*rsa.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadClientPublicKey indicates an expected call of ReadClientPublicKey.
func (mr *MockAsimEncryptMockRecorder) ReadClientPublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadClientPublicKey", reflect.TypeOf((*MockAsimEncrypt)(nil).ReadClientPublicKey))
}

// ReadPrivateKey mocks base method.
func (m *MockAsimEncrypt) ReadPrivateKey(filename string) (*rsa.PrivateKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPrivateKey", filename)
	ret0, _ := ret[0].(*rsa.PrivateKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPrivateKey indicates an expected call of ReadPrivateKey.
func (mr *MockAsimEncryptMockRecorder) ReadPrivateKey(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPrivateKey", reflect.TypeOf((*MockAsimEncrypt)(nil).ReadPrivateKey), filename)
}

// ReadPrivateKeyGetByte mocks base method.
func (m *MockAsimEncrypt) ReadPrivateKeyGetByte() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPrivateKeyGetByte")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadPrivateKeyGetByte indicates an expected call of ReadPrivateKeyGetByte.
func (mr *MockAsimEncryptMockRecorder) ReadPrivateKeyGetByte() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPrivateKeyGetByte", reflect.TypeOf((*MockAsimEncrypt)(nil).ReadPrivateKeyGetByte))
}

// ReadPublicKey mocks base method.
func (m *MockAsimEncrypt) ReadPublicKey(filename string) (*rsa.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPublicKey", filename)
	ret0, _ := ret[0].(*rsa.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPublicKey indicates an expected call of ReadPublicKey.
func (mr *MockAsimEncryptMockRecorder) ReadPublicKey(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPublicKey", reflect.TypeOf((*MockAsimEncrypt)(nil).ReadPublicKey), filename)
}

// ReadPublicKeyGetByte mocks base method.
func (m *MockAsimEncrypt) ReadPublicKeyGetByte() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPublicKeyGetByte")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadPublicKeyGetByte indicates an expected call of ReadPublicKeyGetByte.
func (mr *MockAsimEncryptMockRecorder) ReadPublicKeyGetByte() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPublicKeyGetByte", reflect.TypeOf((*MockAsimEncrypt)(nil).ReadPublicKeyGetByte))
}

// SetPrivateKey mocks base method.
func (m *MockAsimEncrypt) SetPrivateKey() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrivateKey")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPrivateKey indicates an expected call of SetPrivateKey.
func (mr *MockAsimEncryptMockRecorder) SetPrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrivateKey", reflect.TypeOf((*MockAsimEncrypt)(nil).SetPrivateKey))
}

// SetPublicKey mocks base method.
func (m *MockAsimEncrypt) SetPublicKey() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPublicKey")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPublicKey indicates an expected call of SetPublicKey.
func (mr *MockAsimEncryptMockRecorder) SetPublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPublicKey", reflect.TypeOf((*MockAsimEncrypt)(nil).SetPublicKey))
}
