// Code generated by MockGen. DO NOT EDIT.
// Source: password.go

// Package mock_security is a generated GoMock package.
package mock_security

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockISecurity is a mock of ISecurity interface.
type MockISecurity struct {
	ctrl     *gomock.Controller
	recorder *MockISecurityMockRecorder
}

// MockISecurityMockRecorder is the mock recorder for MockISecurity.
type MockISecurityMockRecorder struct {
	mock *MockISecurity
}

// NewMockISecurity creates a new mock instance.
func NewMockISecurity(ctrl *gomock.Controller) *MockISecurity {
	mock := &MockISecurity{ctrl: ctrl}
	mock.recorder = &MockISecurityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISecurity) EXPECT() *MockISecurityMockRecorder {
	return m.recorder
}

// EncryptPassword mocks base method.
func (m *MockISecurity) EncryptPassword(ctx context.Context, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptPassword", ctx, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptPassword indicates an expected call of EncryptPassword.
func (mr *MockISecurityMockRecorder) EncryptPassword(ctx, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptPassword", reflect.TypeOf((*MockISecurity)(nil).EncryptPassword), ctx, password)
}

// VerifyPassword mocks base method.
func (m *MockISecurity) VerifyPassword(ctx context.Context, hashed, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPassword", ctx, hashed, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyPassword indicates an expected call of VerifyPassword.
func (mr *MockISecurityMockRecorder) VerifyPassword(ctx, hashed, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPassword", reflect.TypeOf((*MockISecurity)(nil).VerifyPassword), ctx, hashed, password)
}
